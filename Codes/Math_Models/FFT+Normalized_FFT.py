import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from scipy.fft import fft

# Step 1: Organize Data

y1 = [10.56, 614.21, 1177.26, 2535.9, 3744.47, 3451.26, 3137.53, 3594.14, 3806.91, 3488.96, 3020.94, 3330.7, 3111.48, 2761.45, 2660.09, 2554.77, 2390.68, 2264.29, 2226.35, 2070.2, 1992.84, 1931.86, 1870.86, 1739.96, 1719.21, 1660.16, 1668.03, 1497.48, 1491.93, 1453.35, 1432.06, 1367.51, 1330.31, 1348.9, 1283, 1168.71, 1299.69, 1151.62, 1125.26, 1081.83, 1078.22, 1055.53, 1027.99, 989.28, 965.05, 928.13, 919.18, 892.49, 875.54, 851.84, 833.42, 809.21, 789.85, 765.36, 741.07, 726.3, 711.05, 690.29, 670.56, 667.14, 657.46, 643.37, 625.38, 619.24, 601.19, 599.96, 594.2, 579.29, 566.15, 562.22, 553.32, 542.59, 534.95, 526.24, 516.39, 502.04, 498.16, 488.45, 480.91, 473.51, 466.24, 459.31, 450.79, 444.87, 436.68, 429.63, 420.98, 418.36, 413.42, 407.54, 402.35, 383.03, 391.72, 385.54, 383.75, 371.63, 369.65, 364.43, 361.92, 357.5]

y2 = [10.56, 613.46, 1199.82, 2644.46, 4296.33, 3829.33, 3453.25, 4826.46, 5377.51, 4746.94, 4216.8, 4423.13, 4441.37, 3821.22, 3751.26, 3994.12, 3565.31, 3307.71, 3323.57, 2983.87, 2990.74, 3047.49, 2750.99, 2691.89, 2724.21, 2610.55, 2647.74, 2372.4, 2393.55, 2372.4, 2441.81, 2325.62, 2204.45, 2305.02, 2166.12, 2006.63, 1901.13, 2103.59, 2006.63, 1914.21, 1897.15, 1912.63, 1958.55, 1732.54, 1807.54, 1673.44, 1653.57, 1615.78, 1618.23, 1564.18, 1477.74, 1465.37, 1438.64, 1429.51, 1355, 1291.42, 1281.67, 1259.95, 1228.33, 1224.62, 1235.17, 1184.77, 1167.6, 1126.71, 1126.71, 1113.87, 1094.35, 1107.7, 1092.75, 1057.29, 1044.34, 1031.67, 1011.45, 1011.82, 968.42, 946.64, 926.01, 915.76, 886.52, 880.25, 850.09, 847.01, 838.53, 812.98, 800.08, 789.94, 764.59, 759.6, 738.47, 729.05, 727.67, 714.73, 693.48, 683.79, 679.06, 666.06, 650.34, 653.33, 642.83, 630.05]

y3 = [10.56, 624.52, 1235.44, 2869.25, 5102.03, 4318.22, 4079.98, 5655.82, 7045.97, 5655.82, 5014.45, 6368.69, 6368.69, 5335.41, 5145.38, 4803.08, 4746.94, 4826.46, 4251.05, 4251.05, 4006.5, 3838.42, 3665.8, 3336.07, 3161.7, 3213.36, 2946.89, 2823.18, 2785.17, 2664.96, 2664.96, 2590.15, 2453.87, 2554.23, 2421.88, 2170.55, 2231.89, 2109.01, 2022.57, 1875.52, 1862.89, 1868.86, 1791.02, 1605.28, 1662.6, 1530.29, 1477.12, 1413.77, 1415.73, 1371.74, 1325.89, 1264.68, 1256.26, 1208.37, 1185.74, 1117, 1087.57, 1094.12, 1052.98, 1036.44, 1007.21, 997.09, 944.34, 952.99, 977.01, 926.17, 903.98, 889.22, 874.12, 847.4, 826.75, 801.87, 799.69, 791.88, 777.32, 750.5, 743.14, 719.84, 702.81, 692.48, 682.67, 663.69, 653.1, 643.05, 628.48, 616.08, 604.4, 602.08, 587.3, 584.61, 568.66, 563.55, 552.34, 545.04, 541.37, 525.09, 516.08, 516.54, 507.98, 501.71]

y4 = [10.56, 612.09, 1170.64, 2465.38, 3828.43, 3322.98, 2932.16, 3657.1, 3376.27, 3196.38, 2804.87, 2992.04, 2823.18, 2564.77, 2400.65, 2324.81, 2195.53, 2115.69, 1972.12, 1875.63, 1789.91, 1726.21, 1683.12, 1600.5, 1549.95, 1513.81, 1446.18, 1389.42, 1371.11, 1347.76, 1333.7, 1265.17, 1238, 1223.58, 1216.68, 1184.67, 1199.74, 1110.06, 1062.07, 1024.31, 1020.95, 1001.98, 986.28, 921.63, 921.63, 919.34, 878.9, 865.87, 848.4, 824.67, 805.81, 778.04, 788.74, 770.39, 757.96, 733.8, 722.52, 722.41, 699.07, 699.99, 685.32, 681.58, 672.65, 691.6, 662.45, 671.4, 664.28, 659.03, 635.36, 659.02, 669.65, 646.99, 655.55, 653.73, 638.75, 638.62, 609.98, 611.98, 601.15, 594.16, 582.83, 576.03, 574.51, 547.46, 539.41, 543.69, 531.39, 519.05, 513.38, 502.97, 496.8, 483.18, 476.34, 469.4, 463.21, 455.58, 459.44, 451.79, 451.66, 445.27]

y5 = [10.56, 621.14, 1227.14, 2736.02, 5328.08, 4189.29, 3650.03, 5335.41, 6957.48, 5277.62, 5032.84, 14479.39, 3489.65, 6070.51, 2963.53, 4746.94, 5251.76, 4563.39, 4284.87, 3921.21, 3417.32, 3241.53, 3197.96, 3075.23, 2978.75, 2827.54, 2652.54, 2529.36, 2475.09, 2421.88, 2400.2, 2252.96, 2149.92, 2192.98, 2093.16, 2174.85, 2068.77, 1887.98, 1826.09, 1739.88, 1677.54, 1682.81, 1623.44, 1469.49, 1532.43, 1443.07, 1385.5, 1319.85, 1307.36, 1273.21, 1210.66, 1155.58, 1162.18, 1105.59, 1072.71, 1042.3, 1035.1, 1017.37, 975.65, 957.43, 937.55, 909.46, 892.77, 879.17, 852.53, 848.76, 832.26, 823.23, 799.62, 789.4, 779.81, 766.85, 744.47, 734.2, 714.42, 699.42, 693.81, 680.07, 669.76, 654.81, 641.87, 625.23, 626.49, 605, 597.28, 590.12, 571.87, 571.07, 562.09, 557.26, 556.01, 532.27, 524.31, 521.84, 517.21, 500.6, 499.99, 491.83, 485.09, 477.72]

# Combine data into a DataFrame
data = pd.DataFrame({'Blood Glucose level 263': y1, 'Blood Glucose level 190': y2, 'Blood Glucose level 130': y3, 'Blood Glucose level 94': y4, 'Blood Glucose level 111': y5})
print("Original Data:")
print(data)

# Step 2: Handle Missing Values (if any)
data = data.fillna(data.mean())

# Step 3: Perform FFT on Each Sample
data_fft = pd.DataFrame()
data_fft['Blood Glucose level 263'] = np.abs(fft(y1))
data_fft['Blood Glucose level 190'] = np.abs(fft(y2))
data_fft['Blood Glucose level 130'] = np.abs(fft(y3))
data_fft['Blood Glucose level 94'] = np.abs(fft(y4))
data_fft['Blood Glucose level 111'] = np.abs(fft(y5))

print("\nFFT Transformed Data:")
print(data_fft)

# Step 4: Normalize FFT Data
scaler = MinMaxScaler()
data_fft_normalized = pd.DataFrame(scaler.fit_transform(data_fft), columns=data_fft.columns)

# Step 5: Ploting FFT and Normalized FFT Data
plt.figure(figsize=(12, 6))

# FFT Data
plt.subplot(1, 2, 1)
plt.plot(data_fft, marker='o')
plt.title("FFT of Blood Glucose Samples")
plt.xlabel("Frequency Index")
plt.ylabel("Amplitude")
plt.legend(data_fft.columns)

# Normalized FFT Data
plt.subplot(1, 2, 2)
plt.plot(data_fft_normalized, marker='o')
plt.title("Normalized FFT of Blood Glucose Samples")
plt.xlabel("Frequency Index")
plt.ylabel("Normalized Amplitude")
plt.legend(data_fft.columns)

plt.tight_layout()
plt.show()
